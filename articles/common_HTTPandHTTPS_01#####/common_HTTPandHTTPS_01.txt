1.http协议 http握手过程
2.https加密原理、规则、证书,数字签名，握手过程， 参考http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html
3.websocket实现原理与实践测试

# 关于https

## http协议
浏览器和服务器之间通信是通过HTTP协议，HTTP协议是Hyper Text Transfer Protocol（超文本传输协议），它是基于TCP/IP通信协议来传递数据的，目前比较常用的是HTTP/1.1，HTTP协议永远都是客户端发起请求，服务器回送响应。  

![Y9QYAU.png](https://s1.ax1x.com/2020/05/04/Y9QYAU.png)

虽然传统的HTTP协议解决了客户端和服务器通信的问题，但是HTTP协议在传输数据的时候，是以明文的形式来传输数据的，这就导致了在需要向服务端传输一些敏感的数据时，非常的不安全。例如，把用户的密码传输给服务器时，密码是明文的，谁都可以看到，这样还叫密码吗？所以，为了安全起见，就提出了在传输数据的时候加密传输。  

## 对称加密

对称加密其实就是同一个密钥可以同时用作信息的加密和解密。废话不多说，来看个例子，假设现在有两个算法f1和f2，f1用于加密数据，f2用于解密数据，下图会模拟使用对称加密的方式进行客户端与服务器的通信。  

![Y9UvJx.png](https://s1.ax1x.com/2020/05/04/Y9UvJx.png)

1. 客户端想要给服务器发送数据data，这次不再是明文传输，而是使用了对称加密算法f1将数据data加密为x，即f1(k，data) = x，将x传输给服务器
2. 服务器受到数据x后，使用对称加密算法f2进行解密，即f2(k，x) = data
3. 服务器想要回给客服端data1，也使用了对称加密算法f1对数据data1进行加密，即f1(k，data1) = y，将y传输给客户端
4. 客户端收到数据y后，使用对称加密算法f2解密数据y，即f2(k，y) = data1

整个通信过程完成，数据不再以明文的形式传输，实现了加密通信。但是这里的秘钥k只能有一个，为什么秘钥k只能有一个，因为服务器去定制秘钥k的时候，它不可能知道有多少个客户端，不可能为每个客户端都量身定制一个秘钥k，如果有一亿个客户端呢，**只有一个秘钥k就导致了每个人都知道这个秘钥k，这样一来，加密了等于没加密**，所以只使用对称加密也是不可取的。  

## 非对称加密

非对称加密会有两个秘钥，一个是公钥一个是私钥，公钥与私钥是一对的，用公钥对数据进行加密，只有用对应的私钥才能解密，用私钥对数据进行加密，只有用对应的公钥才能解密。再来看个例子，假设算法f是非对称加密算法，pk是公钥，sk是私钥，pk和sk都存储在服务器中。  

![Y90GtA.png](https://s1.ax1x.com/2020/05/04/Y90GtA.png)

1. 客户端向服务端发送请求获取公钥pk
2. 服务器收到客服端请求，把pk给客户端
3. 客户端用公钥pk加密想要发送的数据data，即f(pk,data) = y，将数据y传送给服务器
4. 服务器收到数据y，用私钥sk解密y，即f(sk,y) = data，获取到客户端发送的数据
5. 服务器要给客户端回信息data1，用私钥sk进行加密，即f(sk,data1) = y1，将y1回送给客户端
6. 客户端收到信息y1后，用公钥pk进行解密，即f(pk,y1) = data1

整个通信过程完成，使用了非对称加密，这种通信方式有没有漏洞呢，其实也是有的，同样的，pk和sk也只有一对，都存储在服务器，客户端向服务器索要公钥pk的时候，服务器并不知道客户端是谁，是好人还是坏人，所以每个人都可以拿到公钥pk，拿到pk后，客户端在发送数据的时候，经过了公钥pk加密，只要私钥sk不泄露，那么就是安全的，但是在服务器回信息的时候，使用的是私钥sk进行数据加密，前面说了每个人都可以拿到公钥pk，那么**服务器回信息的时候，每个人都可以用拿到的公钥pk对信息进行解密**，所以这个过程在服务器回信息的时候是不安全的，只使用非对称加密也是不可取的。  

## 对称加密 + 非对称加密

如果只使用对称加密或者只使用非对称加密，都是不安全的，那么可不可以把两者都结合在一起，既使用对称加密又使用非对称加密。再来看个例子，假设现在有对称加密算法F，非对称加密算法f，公钥pk和私钥sk一对，都存储在服务器。  

![Y9qsL8.png](https://s1.ax1x.com/2020/05/04/Y9qsL8.png)

1. 客户端向服务端发送请求获取公钥pk
2. 服务器收到客服端请求，把pk给客户端
3. 客户端生成随机字符串num1，用公钥pk进行非对称加密后为y，把y传输给服务器
4. 服务器收到数据y，用私钥sk进行解密，得到字符串num1，此时服务器回应ok，这里的ok是抽象表示，就是告诉客户端我收到了你发过来的数据。**从此开始，客户端与服务器后来的通信，都会用这个字符串num1作为秘钥进行对称加密**
5. 客户端将要发送的数据data以num1作为秘钥进行对称加密，即F(num1，data) = x，把x传输给服务器
6. 服务器收到数据x后进行解密，即F(num1，x) = data，拿到数据data

这个完整的通信过程结合了对称加密与非对称加密，看起来天衣无缝的通讯方式是不是已经很安全了呢，在看完下面这个例子就会明白。  

![Y9L1Yj.png](https://s1.ax1x.com/2020/05/04/Y9L1Yj.png)

在客户端向服务器发起请求的过程中，假设黑客直接介入，黑客也有自己的公钥pk'和私钥sk'。  

1. 客户端向服务端发送请求获取公钥pk，黑客介入，黑客很贼，它假装自己是一个无辜的良民，向服务器发送请求获取公钥pk
2. 服务器收到请求，把pk返回，黑客又继续介入，成功拿到服务器公钥pk，将自己的公钥pk'给客户端，客户端拿到的是假的公钥pk'，但是它并不知道
3. 客户端生成随机字符串num1，用假公钥pk'进行非对称加密后为y'，把y'传输给服务器，传输的过程中，黑客又介入，黑客用自己的私钥sk'解密y'，成功拿到num1，之后用公钥pk加密num1为数据y，把y发送给服务器
4. 服务器收到信息后，返回ok，黑客收到服务器的ok，也告诉客户端ok，从此用num1进行对称加密通信
5. 每次客户端和服务器的通信过程都会被黑客监听、窃取，这个过程一直持续。。。

看完这整个通信过程可以发现，每次客户端和服务器通信，都必须经过黑客，黑客在一开始就把真正的公钥pk掉包了，自己拿到了服务器真正的公钥pk，而返回给客户端假的公钥pk'，可怕的是客户端和服务器都无法察觉。从此开始，客户端发送的信息黑客都可以解密、篡改，并将篡改后的数据发送给服务器，这就是**中间人攻击**，很显然，这种通信方式也是非常不安全的。  

这里根据以上的加密方式小结一下：  

- 明文 = 裸奔
- 对称加密，key唯一 = 明文
- 非对称加密，Server -> Client 不安全
- 对称加密 + 非对称加密，中间人攻击

那么有没有一些比较安全的加密策略呢，答案是有的，请继续清下看。  

## 对称加密 + 非对称加密 + CA

CA是一个第三方的认证机构，是具有公信力的、权威的机构，可以被大家所信任的，那么就可以借助CA来协助我们完成安全的通信。先分析一下中间人攻击的原因所在，客户端在向服务器通信的第一步，也就是在索要公钥的时候就出现了问题，公钥被黑客掉包了，那么如何解决这个问题呢，答案就是利用CA证书，CA机构他也有自己的公钥和私钥，假设CA的公钥为Cpk，私钥为Csk，继续看下面这个例子

![YCP3Qg.png](https://s1.ax1x.com/2020/05/04/YCP3Qg.png)

客户端首次向服务器通信的时候不再直接请求公钥，而是请求数字证书，数字证书是由CA机构用Csk对pk加密生成的，存放在服务器，只有用Cpk解密证书才能获取公钥pk，假如客户端去向CA机构请求Cpk的时候，运气很不好，又遇到黑客劫持掉包，那么干脆就直接把Cpk写死在浏览器，就避免了掉包，所以浏览器会存储一些CA机构的信息，由浏览器自己来维护。上图的通信过程大致如下

1. 客户端向服务器请求证书licence
2. 浏览器将证书返回给客户端
3. 客户端拿到证书后用Cpk解密获取公钥pk
4. 以下通信过程同上，不再叙述。。。