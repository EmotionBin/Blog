# 理解JavaScript中的原型和原型链

本文转载自
[JS中的原型和原型链](https://blog.csdn.net/qq_36996271/article/details/82527256?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task)

#### 说到JS的原型，首先要了解以下几个要点，这几个要点是理解原型的关键点：
1.所有的引用类型（数组、函数、对象）可以自由扩展属性（除null以外）</br>
2.所有的引用类型都有一个"\_\_proto\_\_"属性(也叫隐式原型，它是一个普通的对象)</br>
3.所有的函数都有一个"prototype"属性(这也叫显式原型，它也是一个普通的对象)</br>
4.所有引用类型，它的"\_\_proto\_\_"属性指向它的构造函数的"prototype"属性</br>
5.当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它的"\_\_proto\_\_"属性(也就是它的构造函数的"prototype"属性)中去寻找</br>
----
## 原型
到底什么是原型,先来看一个原型的例子：
```javascript
		//这是一个构造函数
		function Foo(name,age){
			this.name=name;
			this.age=age;
		}
		/*根据要点3，所有的函数都有一个prototype属性，这个属性是一个对象
		再根据要点1，所有的对象可以自由扩展属性
		于是就有了以下写法*/
		Foo.prototype={
			// prototype对象里面又有其他的属性
			showName:function(){
				console.log("I'm "+this.name);//this是什么要看执行的时候谁调用了这个函数
			},
			showAge:function(){
				console.log("And I'm "+this.age);//this是什么要看执行的时候谁调用了这个函数
			}
		}
		var fn=new Foo('小明',19)
		/*当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它
		构造函数的'prototype'属性中去找*/
		fn.showName(); //I'm 小明
		fn.showAge(); //And I'm 19
```
这就是所谓的原型，很好理解，那么为什么要使用原型呢？
试想如果我们要通过Foo()来创建**很多很多个**对象，如果我们是这样子写的话：
```javascript
		function Foo(name,age){
			this.name=name;
			this.age=age;
			this.showName=function(){
				console.log("I'm "+this.name);
			}
			this.showAge=function(){
				console.log("And I'm "+this.age);
			}
		}
```
那么我们创建出来的每一个对象，里面都有showName和showAge方法，这样就会占用很多的资源
而通过原型来实现的话，只需要在构造函数里面给属性赋值，而把方法写在Foo.prototype属性(这个属性是唯一的)里面。这样每个对象都可以使用prototype属性里面的showName、showAge方法，并且节省了不少的资源
----
## 原型链
如果理解了原型，那么原型链也就很好理解了
#### 下面这段话可以帮助理解原型链
根据要点5，当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它构造函数的"prototype"属性中去寻找。那又因为"prototype"属性是一个对象，所以它也有一个"\_\_proto\_\_"属性
那么我们来看一个例子：
```javascript
		// 构造函数
		function Foo(name,age){
		 	this.name=name;
		 	this.age=age;
		}
		Object.prototype.toString=function(){
			//this是什么要看执行的时候谁调用了这个函数。
			console.log("I'm "+this.name+" And I'm "+this.age);
		}
		var fn=new Foo('小明',19);
		fn.toString(); //I'm 小明 And I'm 19
		console.log(fn.toString===Foo.prototype.__proto__.toString); //true
		console.log(fn.__proto__ ===Foo.prototype)//true
		console.log(Foo.prototype.__proto__===Object.prototype)//true
		console.log(Object.prototype.__proto__===null)//true
```
是不是觉得有点奇怪？我们来分析一下:

![8qlxNF.png](https://s1.ax1x.com/2020/03/24/8qlxNF.png)

首先，fn的构造函数是Foo()。所以：
fn.\_\_proto\_\_=== Foo.prototype
又因为Foo.prototype是一个普通的对象，它的构造函数是Object，所以：
Foo.prototype.\_\_proto\_\_=== Object.prototype
通过上面的代码，我们知道这个toString()方法是在Object.prototype里面的，当调用这个对象的本身并不存在的方法时，它会一层一层地往上去找，一直到null为止

#### 所以当fn调用toString()时，JS发现fn中没有这个方法，于是它就去Foo.prototype中去找，发现还是没有这个方法，然后就去Object.prototype中去找，找到了，就调用Object.prototype中的toString()方法

这就是原型链，fn能够调用Object.prototype中的方法正是因为存在原型链的机制。

另外，在使用原型的时候，一般推荐将需要扩展的方法写在构造函数的prototype属性中，避免写在\_\_proto\_\_属性里面，这样做的目的是，如果写在了构造函数的prototype属性中,那么构造函数构造出的每一个成员都可以访问构造函数的prototype属性，这样每一个成员就共有了这个扩展的方法。写在\_\_proto\_\_属性里面则达不到这个目的